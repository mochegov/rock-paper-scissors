/*
 * This file is generated by jOOQ.
 */
package mochegov.game.db.jooq.domain.tables;


import java.time.LocalDateTime;
import java.util.function.Function;

import mochegov.game.db.jooq.domain.Keys;
import mochegov.game.db.jooq.domain.Public;
import mochegov.game.db.jooq.domain.tables.records.PlayerRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Players
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Player extends TableImpl<PlayerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.PLAYER</code>
     */
    public static final Player PLAYER = new Player();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlayerRecord> getRecordType() {
        return PlayerRecord.class;
    }

    /**
     * The column <code>PUBLIC.PLAYER.PLAYER_NAME</code>. Player name
     */
    public final TableField<PlayerRecord, String> PLAYER_NAME = createField(DSL.name("PLAYER_NAME"), SQLDataType.VARCHAR(20).nullable(false), this, "Player name");

    /**
     * The column <code>PUBLIC.PLAYER.NUMBER_WINS</code>. Numbers of wins
     */
    public final TableField<PlayerRecord, Integer> NUMBER_WINS = createField(DSL.name("NUMBER_WINS"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "Numbers of wins");

    /**
     * The column <code>PUBLIC.PLAYER.NUMBER_LOSSES</code>. Numbers of losses
     */
    public final TableField<PlayerRecord, Integer> NUMBER_LOSSES = createField(DSL.name("NUMBER_LOSSES"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "Numbers of losses");

    /**
     * The column <code>PUBLIC.PLAYER.CREATED_AT</code>. Creation timestamp
     */
    public final TableField<PlayerRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Creation timestamp");

    /**
     * The column <code>PUBLIC.PLAYER.UPDATED_AT</code>. Update timestamp
     */
    public final TableField<PlayerRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(6), this, "Update timestamp");

    private Player(Name alias, Table<PlayerRecord> aliased) {
        this(alias, aliased, null);
    }

    private Player(Name alias, Table<PlayerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Players"), TableOptions.table());
    }

    /**
     * Create an aliased <code>PUBLIC.PLAYER</code> table reference
     */
    public Player(String alias) {
        this(DSL.name(alias), PLAYER);
    }

    /**
     * Create an aliased <code>PUBLIC.PLAYER</code> table reference
     */
    public Player(Name alias) {
        this(alias, PLAYER);
    }

    /**
     * Create a <code>PUBLIC.PLAYER</code> table reference
     */
    public Player() {
        this(DSL.name("PLAYER"), null);
    }

    public <O extends Record> Player(Table<O> child, ForeignKey<O, PlayerRecord> key) {
        super(child, key, PLAYER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<PlayerRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_8;
    }

    @Override
    public Player as(String alias) {
        return new Player(DSL.name(alias), this);
    }

    @Override
    public Player as(Name alias) {
        return new Player(alias, this);
    }

    @Override
    public Player as(Table<?> alias) {
        return new Player(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Player rename(String name) {
        return new Player(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Player rename(Name name) {
        return new Player(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Player rename(Table<?> name) {
        return new Player(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, Integer, Integer, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super String, ? super Integer, ? super Integer, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super String, ? super Integer, ? super Integer, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
