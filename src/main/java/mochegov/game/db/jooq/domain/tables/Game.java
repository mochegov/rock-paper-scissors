/*
 * This file is generated by jOOQ.
 */
package mochegov.game.db.jooq.domain.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import mochegov.game.db.jooq.domain.Keys;
import mochegov.game.db.jooq.domain.Public;
import mochegov.game.db.jooq.domain.tables.records.GameRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Games
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Game extends TableImpl<GameRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.GAME</code>
     */
    public static final Game GAME = new Game();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GameRecord> getRecordType() {
        return GameRecord.class;
    }

    /**
     * The column <code>PUBLIC.GAME.ID</code>. Unique identifier
     */
    public final TableField<GameRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "Unique identifier");

    /**
     * The column <code>PUBLIC.GAME.PLAYER_NAME</code>. Name of player
     */
    public final TableField<GameRecord, String> PLAYER_NAME = createField(DSL.name("PLAYER_NAME"), SQLDataType.VARCHAR(20).nullable(false), this, "Name of player");

    /**
     * The column <code>PUBLIC.GAME.GAME_STATE</code>. State of game
     */
    public final TableField<GameRecord, String> GAME_STATE = createField(DSL.name("GAME_STATE"), SQLDataType.VARCHAR(10).nullable(false), this, "State of game");

    /**
     * The column <code>PUBLIC.GAME.CREATED_AT</code>. Creation timestamp
     */
    public final TableField<GameRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Creation timestamp");

    /**
     * The column <code>PUBLIC.GAME.UPDATED_AT</code>. Update timestamp
     */
    public final TableField<GameRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(6), this, "Update timestamp");

    private Game(Name alias, Table<GameRecord> aliased) {
        this(alias, aliased, null);
    }

    private Game(Name alias, Table<GameRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Games"), TableOptions.table());
    }

    /**
     * Create an aliased <code>PUBLIC.GAME</code> table reference
     */
    public Game(String alias) {
        this(DSL.name(alias), GAME);
    }

    /**
     * Create an aliased <code>PUBLIC.GAME</code> table reference
     */
    public Game(Name alias) {
        this(alias, GAME);
    }

    /**
     * Create a <code>PUBLIC.GAME</code> table reference
     */
    public Game() {
        this(DSL.name("GAME"), null);
    }

    public <O extends Record> Game(Table<O> child, ForeignKey<O, GameRecord> key) {
        super(child, key, GAME);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<GameRecord, Integer> getIdentity() {
        return (Identity<GameRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<GameRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_2;
    }

    @Override
    public List<ForeignKey<GameRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CONSTRAINT_21);
    }

    private transient Player _player;

    /**
     * Get the implicit join path to the <code>PUBLIC.PLAYER</code> table.
     */
    public Player player() {
        if (_player == null)
            _player = new Player(this, Keys.CONSTRAINT_21);

        return _player;
    }

    @Override
    public Game as(String alias) {
        return new Game(DSL.name(alias), this);
    }

    @Override
    public Game as(Name alias) {
        return new Game(alias, this);
    }

    @Override
    public Game as(Table<?> alias) {
        return new Game(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Game rename(String name) {
        return new Game(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Game rename(Name name) {
        return new Game(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Game rename(Table<?> name) {
        return new Game(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Integer, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Integer, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
